//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleSecurityApplicationGroups {
      static let groupTimisHealthtifyWidget = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.timis.Healthtify.Widget") ?? "group.timis.Healthtify.Widget"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `number5`.
    static let number5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "number5")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "number5", bundle: ..., traitCollection: ...)`
    static func number5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.number5, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.locale` struct is generated, and contains static references to 33 localization keys.
    struct locale {
      /// en translation:      The last 10 dishes you ate:    
      ///
      /// Locales: en, ru
      static let mainLastDishes = Rswift.StringResource(key: "Main.LastDishes", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add dish
      ///
      /// Locales: en, ru
      static let addProductAddButton = Rswift.StringResource(key: "AddProduct.AddButton", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Adding a dish
      ///
      /// Locales: en, ru
      static let addProductTitle = Rswift.StringResource(key: "AddProduct.Title", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Additional Information
      ///
      /// Locales: en, ru
      static let profileAdditionalInfo = Rswift.StringResource(key: "Profile.AdditionalInfo", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Calorie content of the dish
      ///
      /// Locales: en, ru
      static let addProductDishCallories = Rswift.StringResource(key: "AddProduct.DishCallories", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Carbs
      ///
      /// Locales: en, ru
      static let unitCarbs = Rswift.StringResource(key: "Unit.Carbs", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Daily calorie intake:
      ///
      /// Locales: en, ru
      static let mainDayliCallories = Rswift.StringResource(key: "Main.DayliCallories", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Doing short runs or light gymnastics
      ///
      /// Locales: en, ru
      static let physxState2 = Rswift.StringResource(key: "PhysxState2", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter physical state...
      ///
      /// Locales: en, ru
      static let profileEnterPhysxState = Rswift.StringResource(key: "Profile.Enter.PhysxState", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter your birthday
      ///
      /// Locales: en, ru
      static let profileEnterBirthday = Rswift.StringResource(key: "Profile.Enter.Birthday", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter your height...
      ///
      /// Locales: en, ru
      static let profileEnterHeight = Rswift.StringResource(key: "Profile.Enter.Height", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter your name...
      ///
      /// Locales: en, ru
      static let profileEnterName = Rswift.StringResource(key: "Profile.Enter.Name", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter your weight...
      ///
      /// Locales: en, ru
      static let profileEnterWeight = Rswift.StringResource(key: "Profile.Enter.Weight", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Fats
      ///
      /// Locales: en, ru
      static let unitFats = Rswift.StringResource(key: "Unit.Fats", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en, ru
      static let profileFemale = Rswift.StringResource(key: "Profile.Female", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Filling out the form
      ///
      /// Locales: en, ru
      static let profileTitleFillForm = Rswift.StringResource(key: "Profile.Title.FillForm", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Gr
      ///
      /// Locales: en, ru
      static let unitWeightGr = Rswift.StringResource(key: "Unit.Weight.Gr", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Kg
      ///
      /// Locales: en, ru
      static let unitWeight = Rswift.StringResource(key: "Unit.Weight", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Kkal
      ///
      /// Locales: en, ru
      static let unitCallories = Rswift.StringResource(key: "Unit.Callories", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Main
      ///
      /// Locales: en, ru
      static let mainMain = Rswift.StringResource(key: "Main.main", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en, ru
      static let profileMale = Rswift.StringResource(key: "Profile.Male", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Name of the dish
      ///
      /// Locales: en, ru
      static let addProductName = Rswift.StringResource(key: "AddProduct.Name", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Protein
      ///
      /// Locales: en, ru
      static let unitProtein = Rswift.StringResource(key: "Unit.Protein", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, ru
      static let profileStart = Rswift.StringResource(key: "Profile.Start", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You are not physically active and have a sedentary job.
      ///
      /// Locales: en, ru
      static let physxState1 = Rswift.StringResource(key: "PhysxState1", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You do sports with average loads 3-5 times a week
      ///
      /// Locales: en, ru
      static let physxState3 = Rswift.StringResource(key: "PhysxState3", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You exercise fully 6-7 times a week
      ///
      /// Locales: en, ru
      static let physxState4 = Rswift.StringResource(key: "PhysxState4", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your birthday
      ///
      /// Locales: en, ru
      static let profileBirthday = Rswift.StringResource(key: "Profile.Birthday", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your height
      ///
      /// Locales: en, ru
      static let profileHeight = Rswift.StringResource(key: "Profile.Height", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your name
      ///
      /// Locales: en, ru
      static let profileName = Rswift.StringResource(key: "Profile.Name", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your weight
      ///
      /// Locales: en, ru
      static let profileWeight = Rswift.StringResource(key: "Profile.Weight", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your work is related to physical labor, you train 2 times a day and include strength exercises in your training program
      ///
      /// Locales: en, ru
      static let physxState5 = Rswift.StringResource(key: "PhysxState5", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Сm
      ///
      /// Locales: en, ru
      static let unitHeight = Rswift.StringResource(key: "Unit.Height", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation:      The last 10 dishes you ate:    
      ///
      /// Locales: en, ru
      static func mainLastDishes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Main.LastDishes", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Main.LastDishes"
        }

        return NSLocalizedString("Main.LastDishes", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Add dish
      ///
      /// Locales: en, ru
      static func addProductAddButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddProduct.AddButton", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "AddProduct.AddButton"
        }

        return NSLocalizedString("AddProduct.AddButton", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Adding a dish
      ///
      /// Locales: en, ru
      static func addProductTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddProduct.Title", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "AddProduct.Title"
        }

        return NSLocalizedString("AddProduct.Title", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Additional Information
      ///
      /// Locales: en, ru
      static func profileAdditionalInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.AdditionalInfo", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.AdditionalInfo"
        }

        return NSLocalizedString("Profile.AdditionalInfo", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Calorie content of the dish
      ///
      /// Locales: en, ru
      static func addProductDishCallories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddProduct.DishCallories", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "AddProduct.DishCallories"
        }

        return NSLocalizedString("AddProduct.DishCallories", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Carbs
      ///
      /// Locales: en, ru
      static func unitCarbs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit.Carbs", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Unit.Carbs"
        }

        return NSLocalizedString("Unit.Carbs", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Daily calorie intake:
      ///
      /// Locales: en, ru
      static func mainDayliCallories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Main.DayliCallories", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Main.DayliCallories"
        }

        return NSLocalizedString("Main.DayliCallories", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Doing short runs or light gymnastics
      ///
      /// Locales: en, ru
      static func physxState2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhysxState2", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "PhysxState2"
        }

        return NSLocalizedString("PhysxState2", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Enter physical state...
      ///
      /// Locales: en, ru
      static func profileEnterPhysxState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Enter.PhysxState", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Enter.PhysxState"
        }

        return NSLocalizedString("Profile.Enter.PhysxState", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Enter your birthday
      ///
      /// Locales: en, ru
      static func profileEnterBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Enter.Birthday", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Enter.Birthday"
        }

        return NSLocalizedString("Profile.Enter.Birthday", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Enter your height...
      ///
      /// Locales: en, ru
      static func profileEnterHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Enter.Height", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Enter.Height"
        }

        return NSLocalizedString("Profile.Enter.Height", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Enter your name...
      ///
      /// Locales: en, ru
      static func profileEnterName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Enter.Name", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Enter.Name"
        }

        return NSLocalizedString("Profile.Enter.Name", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Enter your weight...
      ///
      /// Locales: en, ru
      static func profileEnterWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Enter.Weight", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Enter.Weight"
        }

        return NSLocalizedString("Profile.Enter.Weight", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Fats
      ///
      /// Locales: en, ru
      static func unitFats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit.Fats", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Unit.Fats"
        }

        return NSLocalizedString("Unit.Fats", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en, ru
      static func profileFemale(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Female", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Female"
        }

        return NSLocalizedString("Profile.Female", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Filling out the form
      ///
      /// Locales: en, ru
      static func profileTitleFillForm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Title.FillForm", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Title.FillForm"
        }

        return NSLocalizedString("Profile.Title.FillForm", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Gr
      ///
      /// Locales: en, ru
      static func unitWeightGr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit.Weight.Gr", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Unit.Weight.Gr"
        }

        return NSLocalizedString("Unit.Weight.Gr", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Kg
      ///
      /// Locales: en, ru
      static func unitWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit.Weight", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Unit.Weight"
        }

        return NSLocalizedString("Unit.Weight", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Kkal
      ///
      /// Locales: en, ru
      static func unitCallories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit.Callories", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Unit.Callories"
        }

        return NSLocalizedString("Unit.Callories", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Main
      ///
      /// Locales: en, ru
      static func mainMain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Main.main", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Main.main"
        }

        return NSLocalizedString("Main.main", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en, ru
      static func profileMale(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Male", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Male"
        }

        return NSLocalizedString("Profile.Male", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Name of the dish
      ///
      /// Locales: en, ru
      static func addProductName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddProduct.Name", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "AddProduct.Name"
        }

        return NSLocalizedString("AddProduct.Name", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Protein
      ///
      /// Locales: en, ru
      static func unitProtein(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit.Protein", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Unit.Protein"
        }

        return NSLocalizedString("Unit.Protein", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, ru
      static func profileStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Start", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Start"
        }

        return NSLocalizedString("Profile.Start", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: You are not physically active and have a sedentary job.
      ///
      /// Locales: en, ru
      static func physxState1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhysxState1", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "PhysxState1"
        }

        return NSLocalizedString("PhysxState1", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: You do sports with average loads 3-5 times a week
      ///
      /// Locales: en, ru
      static func physxState3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhysxState3", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "PhysxState3"
        }

        return NSLocalizedString("PhysxState3", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: You exercise fully 6-7 times a week
      ///
      /// Locales: en, ru
      static func physxState4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhysxState4", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "PhysxState4"
        }

        return NSLocalizedString("PhysxState4", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Your birthday
      ///
      /// Locales: en, ru
      static func profileBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Birthday", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Birthday"
        }

        return NSLocalizedString("Profile.Birthday", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Your height
      ///
      /// Locales: en, ru
      static func profileHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Height", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Height"
        }

        return NSLocalizedString("Profile.Height", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Your name
      ///
      /// Locales: en, ru
      static func profileName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Name", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Name"
        }

        return NSLocalizedString("Profile.Name", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Your weight
      ///
      /// Locales: en, ru
      static func profileWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.Weight", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Profile.Weight"
        }

        return NSLocalizedString("Profile.Weight", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Your work is related to physical labor, you train 2 times a day and include strength exercises in your training program
      ///
      /// Locales: en, ru
      static func physxState5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PhysxState5", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "PhysxState5"
        }

        return NSLocalizedString("PhysxState5", tableName: "locale", bundle: bundle, comment: "")
      }

      /// en translation: Сm
      ///
      /// Locales: en, ru
      static func unitHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unit.Height", tableName: "locale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "locale", preferredLanguages: preferredLanguages) else {
          return "Unit.Height"
        }

        return NSLocalizedString("Unit.Height", tableName: "locale", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
